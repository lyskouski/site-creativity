<?php namespace Engine\Response;

use \System\Registry;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-12 at 08:22:49.
 */
class TranslationTest extends \Tests\Simple
{

    /**
     * @var Translation
     */
    protected $object;
    protected $sRegex = '/msgid "(.+?)"/m';
    protected $bChanged = false;

    protected function setUp()
    {
        $this->object = new Translation(\Defines\Language::EN);
    }

    public function testUpdateOrdering()
    {
        (new \Engine\Response\Helper\Locales)->add(array(), Translation::TB_SYSTEM, '}}');
    }

    /**
     * Fill missings in accordance with code
     * @group coherence
     */
    public function testConsistency()
    {
        $oLocale = new \Engine\Response\Helper\Locales();

        $sFilepath = Registry::config()->getTranslationPath() . '/be_BY/LC_MESSAGES/system.po';
        $sContent = file_get_contents($sFilepath);
        preg_match_all($this->sRegex, $sContent, $aResult);
        $aFill = array_diff($oLocale->findAll(), $aResult[1]);
        if ($aFill) {
            $oLocale->add($aFill, Translation::TB_SYSTEM, '}}');
        }

        $this->assertEquals(array(), $aFill, "[!] Added new labels. Restart tests");
    }

    /**
     * Sync translations for all languages
     * @group coherence
     */
    public function testTranslationSystem()
    {
        $sPath = Registry::config()->getTranslationPath();
        $aList = scandir($sPath);

        $aTrans = array();
        foreach ($aList as $sDir) {
            if (in_array($sDir, array('nocache', '.', '..'))) {
                continue;
            }
            $sFilepath = "{$sPath}/{$sDir}/LC_MESSAGES/system.po";
            $sContent = file_get_contents($sFilepath);
            preg_match_all($this->sRegex, $sContent, $aResult);
            if ($aTrans) {
                $this->assertEquals('be_BY', key($aTrans));
                $this->assertEquals(array(), array_diff(current($aTrans), $aResult[1]), "[!] Missings for '$sDir'");
                $this->assertEquals(current($aTrans), $aResult[1], "[!] Missings for '$sDir'");
            }
            $aTrans[$sDir] = $aResult[1];
        }
    }

    /**
     * @covers \Engine\Response\Translation::desc
     */
    public function testDesc()
    {
        $this->assertInternalType('array', $this->object->desc('index', 'en', ''));
    }

    /**
     * @covers \Engine\Response\Translation::setTargetLanguage
     * @covers \Engine\Response\Translation::sys
     */
    public function testSetTargetLanguage()
    {
        $this->object->setTargetLanguage('ru');
        $this->assertEquals('Автор', $this->object->sys('LB_ACCESS_AUTHOR'));
        $this->object->setTargetLanguage('en');
        $this->assertEquals('Author', $this->object->sys('LB_ACCESS_AUTHOR'));

    }

    /**
     * @covers \Engine\Response\Translation::get
     */
    public function testGet()
    {
        $this->assertEquals('{[index|og:title|en]}', $this->object->get(['og:title', 'index']));
    }
}
