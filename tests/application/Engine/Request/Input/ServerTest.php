<?php namespace Engine\Request\Input;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-07-14 at 08:50:10.
 * @note most parameters will be missing INPUT_SERVER is empty for PHPUnit
 */
class ServerTest extends \Tests\Simple
{

    /**
     * @var Server
     */
    protected $object;

    protected function setUp ()
    {
        parent::setUp();
        $this->object = new Server;

    }

    /**
     * @covers Engine\Request\Input\Server::isDevelopment
     */
    public function testIsDevelopment ()
    {
        $this->assertTrue( $this->object->isDevelopment() );

    }

    /**
     * @covers Engine\Request\Input\Server::isLive
     */
    public function testIsLive ()
    {
        $this->assertFalse( $this->object->isLive() );

    }

    /**
     * @covers Engine\Request\Input\Server::isTest
     */
    public function testIsTest ()
    {
        $this->assertTrue( $this->object->isTest() );

    }

    /**
     * @covers Engine\Request\Input\Server::isExternalRequest
     */
    public function testIsExternalRequest()
    {
        $this->assertFalse( $this->object->isExternalRequest() );
    }

    /**
     * @covers Engine\Request\Input\Server::getRequestMethod
     */
    public function testGetRequestMethod()
    {
        $this->assertEquals( \Defines\RequestMethod::GET, $this->object->getRequestMethod() );
    }

    /**
     * @covers Engine\Request\Input\Server::isRequestAccepted
     */
    public function testIsRequestAccepted()
    {
        $this->assertTrue( $this->object->isRequestAccepted() );
    }

    /**
     * @covers Engine\Request\Input\Server::getHttpPort
     */
    public function testGetHttpPort ()
    {
        $this->assertEquals( '', $this->object->getHttpPort() );

        (new \Engine\Request\Input)->setServer('SERVER_PORT', '80' );
        $this->assertEquals( '', $this->object->getHttpPort() );

    }

    /**
     * @covers Engine\Request\Input\Server::getHttpHost
     */
    public function testGetHttpHost ()
    {
        $this->assertEquals( 'localhost', $this->object->getHttpHost() );

    }

    /**
     * @covers Engine\Request\Input\Server::getHttpReferer
     */
    public function testGetHttpReferer ()
    {
        $this->assertEquals( '', $this->object->getHttpReferer() );

    }

    /**
     * @covers Engine\Request\Input\Server::getDocumentRoot
     */
    public function testGetDocumentRoot ()
    {
        $this->assertEquals( '', $this->object->getDocumentRoot() );

    }

    /**
     * @covers Engine\Request\Input\Server::getBrowser
     */
    public function testGetBrowser ()
    {
        $this->assertEquals( '', $this->object->getBrowser() );

    }

    /**
     * @covers Engine\Request\Input\Server::isBot
     */
    public function testIsBot ()
    {
        $this->assertTrue( $this->object->isBot() );

    }

    /**
     * @covers Engine\Request\Input\Server::getEnv
     * @covers Engine\Request\Input\Server::setEnv
     */
    public function testGetEnv ()
    {
        $this->assertEquals( 'test', $this->object->getEnv() );
        $this->assertInstanceOf( 'Engine\Request\Input\Server', $this->object->setEnv( $this->object->getEnv() ) );

    }

    /**
     * @covers Engine\Request\Input\Server::getSite
     */
    public function testGetSite ()
    {
        $this->assertEquals( 'localhost', $this->object->getSite() );

    }

    /**
     * @covers Engine\Request\Input\Server::getRelativePath
     */
    public function testGetRelativePath ()
    {
        $this->assertEquals( Server::RELATIVE_PATH, $this->object->getRelativePath() );

        (new \Engine\Request\Input)->setServer('REQUEST_URI', '/test.html?value=1' );
        $this->assertEquals( '/test.html', $this->object->getRelativePath() );

    }

    /**
     * @note could return 'phpunit' or anything else
     *
     * @covers Engine\Request\Input\Server::getFilename
     */
    public function testGetFilename ()
    {
        $this->assertInternalType( 'string', $this->object->getFilename() );

    }

    /**
     * @covers Engine\Request\Input\Server::getUserIp
     */
    public function testGetUserIp ()
    {
        $this->assertEquals( '', $this->object->getUserIp() );

        $ip = '8.8.8.8';
        (new \Engine\Request\Input)->setServer('HTTP_X_FORWARDED_FOR', $ip );
        $this->assertEquals( $ip, $this->object->getUserIp() );

    }

}
