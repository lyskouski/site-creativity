<?php namespace Access;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-16 at 10:28:37.
 */
class AllowedTest extends \Tests\Simple
{

    /**
     * @var Allowed
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->object = new Allowed;
    }

    /**
     * @covers Access\Allowed::__construct
     * @covers Access\Allowed::addRequestMethod
     */
    public function testAddRequestMethod()
    {
        $this->assertInstanceOf(
            '\Access\Allowed',
            $this->object->addRequestMethod(\Defines\RequestMethod::POST)
        );
    }

    /**
     * @covers Access\Allowed::addRequestMethod
     */
    public function testAddRequestMethodEx0()
    {
        $this->setExpectedException('\Error\Application');
        $this->object->addRequestMethod('missing');
    }

    /**
     * @covers Access\Allowed::bindExtension
     */
    public function testBindExtension()
    {
        $this->object->addRequestMethod(\Defines\RequestMethod::POST);
        $this->assertInstanceOf(
            '\Access\Allowed',
            $this->object->bindExtension(\Defines\Extension::HTML)
        );
    }

    /**
     * @covers Access\Allowed::bindExtension
     */
    public function testBindExtensionEx1()
    {
        $this->setExpectedException('\Error\Application');
        $this->assertInstanceOf(
            '\Access\Allowed',
            $this->object->bindExtension(\Defines\Extension::HTML)
        );
    }

    /**
     * @covers Access\Allowed::bindExtension
     */
    public function testBindExtensionEx2()
    {
        $this->setExpectedException('\Error\Application');
        $this->object->addRequestMethod(\Defines\RequestMethod::POST);
        $this->assertInstanceOf(
            '\Access\Allowed',
            $this->object->bindExtension('missing')
        );
    }

    /**
     * @covers Access\Allowed::copyToExtension
     */
    public function testCopyToExtension()
    {
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML);

        $this->assertInstanceOf(
            '\Access\Allowed',
            $this->object->copyToExtension(\Defines\Extension::JSON)
        );
    }

    /**
     * @covers Access\Allowed::copyToExtension
     */
    public function testCopyToExtensionEx1()
    {
        $this->setExpectedException('\Error\Application');
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML)
                ->copyToExtension('missing');
    }

    /**
     * @covers Access\Allowed::copyToExtension
     */
    public function testCopyToExtensionEx2()
    {
        $this->setExpectedException('\Error\Application');
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->copyToExtension(\Defines\Extension::HTML);
    }

    /**
     * @covers Access\Allowed::copyToExtension
     */
    public function testCopyToExtensionEx3()
    {
        $this->setExpectedException('\Error\Application');
        $this->object->copyToExtension(\Defines\Extension::HTML);
    }

    /**
     * @covers Access\Allowed::bindKey
     */
    public function testBindKey()
    {
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML);

        $this->assertInstanceOf(
            '\Access\Allowed',
            $this->object->bindKey('test')
        );
    }

    /**
     * @covers Access\Allowed::bindKey
     */
    public function testBindKeyEx0()
    {
        $this->setExpectedException('\Error\Application');
        $this->object->bindKey('test');
    }

    /**
     * @covers Access\Allowed::bindNullKey
     */
    public function testBindNullKey()
    {
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML);

        $this->assertInstanceOf(
            '\Access\Allowed',
            $this->object->bindNullKey()
        );
    }

    /**
     * @covers Access\Allowed::bindNullKey
     */
    public function testBindNullKeyEx0()
    {
        $this->setExpectedException('\Error\Application');
        $this->object->bindNullKey();
    }

    /**
     * @covers Access\Allowed::isReach
     */
    public function testIsReachEx0()
    {
        $this->setExpectedException('\Error\Validation');
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML);

        $this->object->isReach(\Defines\RequestMethod::GET, null);
    }

    /**
     * @covers Access\Allowed::isReach
     */
    public function testIsReachEx1()
    {
        $this->setExpectedException('\Error\Validation');
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML);

        $this->object->isReach(\Defines\RequestMethod::POST, \Defines\Extension::JSON);
    }

    /**
     * @covers Access\Allowed::isReach
     * @covers Access\Allowed::checkList
     */
    public function testIsReachEx2()
    {
        $this->setExpectedException('\Error\Validation');
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML)
                    ->bindNullKey();
        (new \Engine\Request\Input)->setGet('test', 1);
        $this->object->isReach(\Defines\RequestMethod::POST, \Defines\Extension::HTML);
    }

    /**
     * @covers Access\Allowed::isReach
     * @covers Access\Allowed::checkList
     * @covers Access\Allowed::checkValue
     */
    public function testIsReachEx3()
    {
        $this->setExpectedException('\Error\Validation');
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML)
                    ->bindKey('key', array('type'=>'integer'));
        (new \Engine\Request\Input)->setPost('key', 'test');
        $this->object->isReach(\Defines\RequestMethod::POST, \Defines\Extension::HTML);
    }

    /**
     * @covers Access\Allowed::isReach
     * @covers Access\Allowed::checkList
     * @covers Access\Allowed::checkValue
     */
    public function testIsReach()
    {
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML)
                    ->bindKey('key', array('type'=>'integer'));
        (new \Engine\Request\Input)->setPost('key', 1);
        $this->object->isReach(\Defines\RequestMethod::POST, \Defines\Extension::HTML);
    }

    /**
     * @covers Access\Allowed::isReach
     * @covers Access\Allowed::checkList
     * @covers Access\Allowed::checkValue
     */
    public function testIsReachEx4()
    {
        $this->setExpectedException('\Error\Validation');
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML)
                    ->bindKey('key', array('type'=>'integer'));
        (new \Engine\Request\Input)->setPost('key', 1)->setPost('key2', 'test');
        $this->object->isReach(\Defines\RequestMethod::POST, \Defines\Extension::HTML);
    }

    /**
     * @covers Access\Allowed::isReach
     * @covers Access\Allowed::checkList
     * @covers Access\Allowed::checkValue
     */
    public function testIsReach2()
    {
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML)
                    ->bindKey('key', array('type'=>'integer'))
                    ->bindKey('key2');
        (new \Engine\Request\Input)->setPost('key', 1)->setPost('key2', 'test');
        $this->object->isReach(\Defines\RequestMethod::POST, \Defines\Extension::HTML);
    }

    /**
     * @covers Access\Allowed::isReach
     * @covers Access\Allowed::checkList
     * @covers Access\Allowed::checkValue
     */
    public function testIsReach3()
    {
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML)
                    ->bindKey('key', array('type'=>'integer'))
                    ->bindKey('key2');
        $this->object->isReach(\Defines\RequestMethod::POST, \Defines\Extension::HTML);
    }

    /**
     * Not allowed parameter was used
     *
     * @covers Access\Allowed::isReach
     * @covers Access\Allowed::checkList
     * @covers Access\Allowed::checkValue
     */
    public function testIsReachEx5()
    {
        $this->setExpectedException('\Error\Validation');
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML)
                    ->bindKey('key2');
        (new \Engine\Request\Input)->setPost('key', 1);
        $this->object->isReach(\Defines\RequestMethod::POST, \Defines\Extension::HTML);
    }

    /**
     * Check with combination of POST and GET
     * @covers Access\Allowed::isReach
     * @covers Access\Allowed::checkList
     * @covers Access\Allowed::checkValue
     */
    public function testIsReach4()
    {
        $this->object->addRequestMethod(\Defines\RequestMethod::POST)
                ->bindExtension(\Defines\Extension::HTML)
                    ->bindKey('key', array('type'=>'integer'))
            ->addRequestMethod(\Defines\RequestMethod::GET)
                ->bindExtension(\Defines\Extension::HTML)
                    ->bindKey('key2');

        (new \Engine\Request\Input)->setPost('key', 1)
            ->setGet('key2', 1);
        $this->object->isReach(\Defines\RequestMethod::POST, \Defines\Extension::HTML);
        $this->object->isReach(\Defines\RequestMethod::GET, \Defines\Extension::HTML);
    }
}
