<?php namespace Access;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-28 at 09:15:48.
 */
class UserTest extends \Tests\Simple
{

    /**
     * @var User
     */
    protected $object;

    protected function setUp()
    {
        parent::setUp();
        $this->object = new User;
    }

    protected function tearDown()
    {
        parent::tearDown();
        \System\Registry::connection()->getConnection()->exec("REPLACE INTO `user_access` (`id`, `user_id`, `access_id`) VALUES (1,0,6);");
    }

    /**
     * @covers Access\User::__construct
     */
    public function testConstruct()
    {
        $this->object = new User();
        $this->assertFalse($this->object->isLogged());
        $this->object = new User('0|missing');
        $this->assertFalse($this->object->isLogged());
    }

    /**
     * @covers Access\User::__construct
     */
    public function testConstructException()
    {
        $this->setExpectedException('\Error\Validation');
        \System\Registry::connection()->getConnection()->exec("DELETE FROM `user_access` WHERE 1=1;");
        \System\Registry::connection()->getConnection()->exec("DELETE FROM `user_account` WHERE 1=1;");
        $this->object = new User();
    }

    /**
     * @covers Access\User::getAccounts
     * @covers Access\User::setNewCookie
     * @covers Access\User::out
     */
    public function testGetAccounts()
    {
        $oAcc = new \Data\Doctrine\Main\UserAccount();
        $oAcc->setAccount('test@test.com')
            ->setUser((new \Data\UserHelper)->getUndefinedUser())
            ->setType(\Defines\User\Account::MAIL)
            ->setUpdatedAt(new \DateTime());
        \System\Registry::connection()->persist($oAcc);
        \System\Registry::connection()->flush();

        $a = $this->object->getAccounts();
        $this->assertInternalType('array', $a);
        $this->assertTrue(sizeof($a) > 0);
        /* @var $o \Data\Doctrine\Main\UserAccount */
        foreach ($a as $o) {
            $this->assertInstanceOf('\Data\Doctrine\Main\UserAccount', $o);
        }

        $this->object->setNewCookie($o->getUser());
        $this->assertTrue(strlen($o->getUser()->getCookie()) > 0);

        $this->object->out();
        $this->assertTrue($o->getUser()->getCookie() === null);
    }

    /**
     * @covers Access\User::getName
     */
    public function testGetName()
    {
        $this->assertEquals('Anonimus', $this->object->getName());
    }

    /**
     */
    public function testSetNewCookie()
    {
        $a = $this->object->getAccounts();
        $this->assertInternalType('array', $a);
        foreach ($a as $o) {
            $this->assertInstanceOf('\Data\Doctrine\Main\UserAccount', $o);
        }
    }

    /**
     * @covers Access\User::isLogged
     */
    public function testIsLogged()
    {
        $this->assertFalse($this->object->isLogged());
    }

    /**
     * @covers Access\User::isAdmin
     */
    public function testIsAdmin()
    {
        $this->assertFalse($this->object->isAdmin());
    }

    /**
     * @covers Access\User::checkAccess
     * @covers Access\User::isAdmin
     */
    public function testCheckAccess()
    {
        $this->assertTrue($this->object->checkAccess('index', 'indexAction'));
    }

    /**
     * @covers Access\User::checkAccess
     * @covers Access\User::isAdmin
     * @covers Access\User::__construct
     * @covers System\Registry::setCron
     * @covers System\Registry::cron
     */
    public function testCheckAccess2()
    {
        \System\Registry::setCron(true);
        $this->assertTrue(\System\Registry::cron());

        $this->object = new User;
        $this->assertTrue($this->object->checkAccess('index', 'indexAction'));
        $this->assertTrue($this->object->isAdmin());
    }
}
