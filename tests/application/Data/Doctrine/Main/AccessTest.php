<?php namespace Data\Doctrine\Main;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-09-24 at 13:11:58.
 */
class AccessTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Access
     */
    protected $object;

    protected function setUp()
    {
        parent::setUp();
        $this->object = new Access;
    }

    /**
     * Check if all translations are available for `access`-table
     */
    public function testTranslationsConsistency()
    {
        $sName = __DIR__ . '/actionData.php';
        $sContent = file_get_contents($sName);
        // Hack for translations (save all variations)
        $oEntityManager = (new \Tests\Config\Database)->getRealDatabase();
        $aDbAccess = $oEntityManager->getRepository(\Defines\Database\CrMain::ACCESS)->findAll();
        $sAccess = "<?php\n/** @note Do not edit! Auto-Generated by @see Data\Doctrine\Main\ActionTest::testDatabaseConsistency */ \n";
        /* @var $oAccess \Data\Doctrine\Main\Access */
        foreach ($aDbAccess as $oAccess) {
            $sAccess .= "\n\System\Registry::translation()->sys('{$oAccess->getTitle()}');";
            $sAccess .= "\n\System\Registry::translation()->sys('{$oAccess->getTitle()}_DESCRIPTION');";
        }
        file_put_contents($sName, $sAccess);
        $this->assertEquals($sContent, $sAccess);
    }

    /**
     * @covers Data\Doctrine\Main\Access::setTitle
     * @covers Data\Doctrine\Main\Access::getTitle
     */
    public function testSetTitle()
    {
        $title = 'test';
        $this->object->setTitle($title);
        $this->assertEquals($title, $this->object->getTitle());
    }

    /**
     * @covers Data\Doctrine\Main\Access::getId
     */
    public function testGetId()
    {
        $this->assertEquals(null, $this->object->getId());
    }

    /**
     * @covers Data\Doctrine\Main\Access::setAccess
     * @covers Data\Doctrine\Main\Access::getAccess
     */
    public function testSetAccess()
    {
        $obj = new Access();
        $this->object->setAccess($obj);
        $this->assertEquals($obj, $this->object->getAccess());
    }
}
