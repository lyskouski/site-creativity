<?php

namespace Data\Doctrine\Proxy\__CG__\Data\Doctrine\Main;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CronHistory extends \Data\Doctrine\Main\CronHistory implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     *
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'id', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'status', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'updatedAt', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'evMinute', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'evHour', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'evDay', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'evMonth', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'evWeekDay', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'command', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'title', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'peakMemory', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'peakCpu', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'peakTime', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'cronLog', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'cron'];
        }

        return ['__isInitialized__', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'id', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'status', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'updatedAt', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'evMinute', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'evHour', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'evDay', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'evMonth', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'evWeekDay', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'command', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'title', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'peakMemory', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'peakCpu', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'peakTime', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'cronLog', '' . "\0" . 'Data\\Doctrine\\Main\\CronHistory' . "\0" . 'cron'];
    }

    /**
     *
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CronHistory $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     *
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }


    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setEvMinute($evMinute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEvMinute', [$evMinute]);

        return parent::setEvMinute($evMinute);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvMinute()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvMinute', []);

        return parent::getEvMinute();
    }

    /**
     * {@inheritDoc}
     */
    public function setEvHour($evHour)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEvHour', [$evHour]);

        return parent::setEvHour($evHour);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvHour()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvHour', []);

        return parent::getEvHour();
    }

    /**
     * {@inheritDoc}
     */
    public function setEvDay($evDay)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEvDay', [$evDay]);

        return parent::setEvDay($evDay);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvDay()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvDay', []);

        return parent::getEvDay();
    }

    /**
     * {@inheritDoc}
     */
    public function setEvMonth($evMonth)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEvMonth', [$evMonth]);

        return parent::setEvMonth($evMonth);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvMonth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvMonth', []);

        return parent::getEvMonth();
    }

    /**
     * {@inheritDoc}
     */
    public function setEvWeekDay($evWeekDay)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEvWeekDay', [$evWeekDay]);

        return parent::setEvWeekDay($evWeekDay);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvWeekDay()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvWeekDay', []);

        return parent::getEvWeekDay();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommand($command)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommand', [$command]);

        return parent::setCommand($command);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommand()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommand', []);

        return parent::getCommand();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setPeakMemory($peakMemory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPeakMemory', [$peakMemory]);

        return parent::setPeakMemory($peakMemory);
    }

    /**
     * {@inheritDoc}
     */
    public function getPeakMemory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeakMemory', []);

        return parent::getPeakMemory();
    }

    /**
     * {@inheritDoc}
     */
    public function setPeakCpu($peakCpu)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPeakCpu', [$peakCpu]);

        return parent::setPeakCpu($peakCpu);
    }

    /**
     * {@inheritDoc}
     */
    public function getPeakCpu()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeakCpu', []);

        return parent::getPeakCpu();
    }

    /**
     * {@inheritDoc}
     */
    public function setPeakTime($peakTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPeakTime', [$peakTime]);

        return parent::setPeakTime($peakTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getPeakTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeakTime', []);

        return parent::getPeakTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setCronLog($cronLog)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCronLog', [$cronLog]);

        return parent::setCronLog($cronLog);
    }

    /**
     * {@inheritDoc}
     */
    public function getCronLog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCronLog', []);

        return parent::getCronLog();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCron(\Data\Doctrine\Main\Cron $cron = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCron', [$cron]);

        return parent::setCron($cron);
    }

    /**
     * {@inheritDoc}
     */
    public function getCron()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCron', []);

        return parent::getCron();
    }

}
