<?php

namespace Data\Doctrine\Proxy\__CG__\Data\Doctrine\Main;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ContentHistory extends \Data\Doctrine\Main\ContentHistory implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     *
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'uid', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'id', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'contentId', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'pattern', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'language', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'type', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'access', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'updatedAt', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'authorId', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'auditorId', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'content', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'search'];
        }

        return ['__isInitialized__', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'uid', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'id', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'contentId', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'pattern', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'language', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'type', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'access', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'updatedAt', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'authorId', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'auditorId', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'content', '' . "\0" . 'Data\\Doctrine\\Main\\ContentHistory' . "\0" . 'search'];
    }

    /**
     *
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ContentHistory $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     *
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }


    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentId($contentId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentId', [$contentId]);

        return parent::setContentId($contentId);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentId', []);

        return parent::getContentId();
    }

    /**
     * {@inheritDoc}
     */
    public function setPattern($pattern)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPattern', [$pattern]);

        return parent::setPattern($pattern);
    }

    /**
     * {@inheritDoc}
     */
    public function getPattern()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPattern', []);

        return parent::getPattern();
    }

    /**
     * {@inheritDoc}
     */
    public function setLanguage($language)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLanguage', [$language]);

        return parent::setLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguage', []);

        return parent::getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccess($access)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccess', [$access]);

        return parent::setAccess($access);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccess()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccess', []);

        return parent::getAccess();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthorId($authorId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthorId', [$authorId]);

        return parent::setAuthorId($authorId);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorId', []);

        return parent::getAuthorId();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuditorId($auditorId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuditorId', [$auditorId]);

        return parent::setAuditorId($auditorId);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuditorId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuditorId', []);

        return parent::getAuditorId();
    }

    /**
     * {@inheritDoc}
     */
    public function setContent($content)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContent', [$content]);

        return parent::setContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function getContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', []);

        return parent::getContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setSearch($search)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSearch', [$search]);

        return parent::setSearch($search);
    }

    /**
     * {@inheritDoc}
     */
    public function getSearch()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSearch', []);

        return parent::getSearch();
    }

    /**
     * {@inheritDoc}
     */
    public function getUid()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getUid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUid', []);

        return parent::getUid();
    }

}
